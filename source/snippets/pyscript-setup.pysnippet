# Common imports and utilities for interactive Python cells
import asyncio
from io import StringIO
from js import console, document, fetch
import os
import sys
import shutil

def copy_localfs_to_browser(src_root="localfs", dst_root="/home/pyodide"):
    """
    Recursively copy all files and directories under `src_root` to `dst_root` in Pyodide.
    """
    for root, dirs, files in os.walk(src_root):
        # Compute the corresponding destination directory
        relative_path = os.path.relpath(root, src_root)
        dest_dir = os.path.join(dst_root, relative_path)
        os.makedirs(dest_dir, exist_ok=True)
        
        # Copy all files
        for fname in files:
            src_file = os.path.join(root, fname)
            dst_file = os.path.join(dest_dir, fname)
            shutil.copy2(src_file, dst_file)
            console.log(f"Copied {src_file} -> {dst_file}")

copy_localfs_to_browser()

console.log('here are the web fs contents')
for root, dirs, files in os.walk('/home/pyodide'):
    console.log(root, dirs, files)

#cache_dir = "/home/pyodide/.cache/matplotlib"
#os.makedirs(cache_dir, exist_ok=True)
#
## Copy both prebuilt caches into place
#for fname in ["fontlist-v330.json", "fontlist-v390.json"]:
#    src = f"localfs/{fname}"   # adjust if you put them elsewhere
#    if os.path.exists(src):
#        shutil.copy(src, os.path.join(cache_dir, fname))
#

# Import matplotlib once at the beginning and make it available to all cells
try:
    import matplotlib
    import matplotlib.pyplot as plt
    import io
    import base64
    
    # Set matplotlib to use Agg backend to prevent auto-display
    matplotlib.use('Agg')
    
    # Custom SDS style configuration
    custom_style = {
        # Axes settings
        'axes.axisbelow': True,
        'axes.facecolor': '#eaf3f5',
        'axes.edgecolor': 'black',
        'axes.linewidth': 1.0,
        'axes.grid': True,
        'axes.grid.axis': 'both',
        'axes.labelsize': 10,
        'axes.labelpad': 10,
        'axes.spines.top': False,
        'axes.spines.right': False,
        'axes.titlesize': 12,
        
        # Boxplots settings
        'boxplot.boxprops.color': 'C0',
        'boxplot.whiskerprops.color': 'C0',
        'boxplot.medianprops.linewidth': 2,
        'boxplot.medianprops.color': 'C1',
        
        # Figure settings
        'figure.dpi': 100,
        'figure.edgecolor': 'none',
        'figure.facecolor': '#eaf3f5',
        'figure.figsize': [4, 3.2],
        
        # Grid settings
        'grid.color': 'lightgray',
        'grid.linestyle': '-',
        'grid.linewidth': 0.5,
        'grid.alpha': 0.7,
        
        # Line settings
        'lines.color': 'C4',
        'lines.linewidth': 2.0,
        'lines.markersize': 8,
        
        # Font settings
        'font.size': 12,
        'font.family': 'sans-serif',
        'axes.titlesize': 14,
        'axes.labelsize': 12,
        'xtick.labelsize': 10,
        'ytick.labelsize': 10,
        'legend.fontsize': 11,
        
        # Legend
        'legend.frameon': True,
        'legend.framealpha': 0.8,
        'legend.fancybox': True,
        'legend.shadow': False,
        
        # Mathtext settings
        'mathtext.fontset': 'stix',
        'mathtext.rm': 'stix',
        'mathtext.it': 'stix',
        
        # Patch settings
        'patch.facecolor': 'xkcd:baby blue',
        'patch.edgecolor': 'xkcd:blue gray',
        'patch.force_edgecolor': True,
        
        # Text settings
        'text.usetex': False,
        
        # Savefig settings
        'savefig.dpi': 100,
        'savefig.bbox': 'tight',
        'savefig.facecolor': '#eaf3f5',
        'savefig.edgecolor': 'none',
        
        # Ticks
        'xtick.direction': 'inout',
        'ytick.direction': 'inout',
        'xtick.major.size': 4,
        'ytick.major.size': 4,
        'xtick.minor.size': 2,
        'ytick.minor.size': 2
    }
    
    # Apply the custom style
    plt.rcParams.update(custom_style)
    console.log("Custom SDS matplotlib style applied successfully")
    
    _matplotlib_available = True
except ImportError:
    _matplotlib_available = False
    console.log("Matplotlib not available")

# Import pandas and altair globally
try:
    import pandas as pd
except ImportError:
    console.log("Pandas not available")

try:
    import altair as alt
    console.log("Altair imported and made available globally")
except ImportError as e:
    console.log(f"Failed to import altair: {e}")
except Exception as e:
    console.log(f"Error with altair: {e}")

# Utility function to hide splash loading indicators
def hide_splash(target_id):
    """Hide the splash loading div in the specified target element"""
    try:
        target_element = document.getElementById(target_id)
        if target_element:
            splash_divs = target_element.getElementsByClassName('splash')
            for splash in splash_divs:
                splash.style.display = 'none'
    except Exception as e:
        console.log(f"Could not hide splash in {target_id}: {e}")

def display(obj, target=None, append=True):
    """Display an object in the specified target div."""
    if target:
        element = document.getElementById(target)
        if element:
            if append:
                element.innerHTML += str(obj)
            else:
                element.innerHTML = str(obj)
    else:
        console.log(str(obj))

# Import required modules for file download and filesystem operations

async def _ensure_heroes_csv():
    """Ensure heroes.csv is available in data/ directory, always download fresh version"""
    try:
        # Create data directory if it doesn't exist
        os.makedirs("data", exist_ok=True)
        
        # console.log("Loading heroes.csv dataset into data/ directory...")
        
        # Always fetch fresh CSV content from GitHub to ensure latest version
        response = await fetch("https://raw.githubusercontent.com/dariomalchiodi/sds/main/data/heroes.csv")
        
        if response.ok:
            csv_content = await response.text()
            
            # Write to Pyodide's virtual filesystem in data/ directory
            with open("data/heroes.csv", "w") as f:
                f.write(csv_content)
            
            console.log("Heroes dataset stored successfully in data/heroes.csv")
            return True
        else:
            console.log(f"Failed to load heroes.csv: HTTP {{response.status}}")
            return False
            
    except Exception as e:
        console.log(f"Error loading heroes.csv: {{e}}")
        return False

# Load the file and wait for completion
await _ensure_heroes_csv()

def render_altair(result, cell_number):
    # This is likely an Altair chart - try different rendering methods
    try:
        if hasattr(result, 'to_json'):
            try:
                # console.log("Trying to_json() method with Vega-Embed")
                chart_spec = result.to_json()
                # console.log("Chart spec length:", len(chart_spec))
                
                # Parse the JSON spec
                import json
                spec_dict = json.loads(chart_spec)
                # console.log("Parsed spec successfully")
                
                # Create a unique div for this chart
                chart_div_id = f"altair-chart-{cell_number}"
                chart_html = '<div id="' + chart_div_id + '" style="width: 100%; height: 400px;"></div>'
                element = document.getElementById(f"graph-{cell_number}")
                if element:
                    element.innerHTML = chart_html
                
                # Use Vega-Embed to render the chart - create JS code safely
                # Build JavaScript code line by line to avoid conflicts
                js_lines = []
                js_lines.append("setTimeout(function() " + "{{")
                js_lines.append("try " + "{{")
                js_lines.append("const spec = " + chart_spec + ";")
                js_lines.append("vegaEmbed('#" + chart_div_id + "', spec).then(function(result) " + "{{")
                # js_lines.append("console.log('Chart rendered successfully');")
                js_lines.append("}}).catch(function(error) " + "{{")
                js_lines.append("console.error('Vega-Embed error:', error);")
                js_lines.append("}});")
                js_lines.append("}} catch(e) " + "{{")
                js_lines.append("console.error('Error rendering chart:', e);")
                js_lines.append("}}")
                js_lines.append("}}, 100);")
                
                js_code = " ".join(js_lines)
                
                # Execute the JavaScript code
                from js import eval as js_eval
                js_eval(js_code)

            except Exception as e:
                console.log("to_json() with Vega-Embed failed:", str(e))
        
                        
    except Exception as e:
        console.log(f"Error rendering Altair chart: {{e}}")
        element = document.getElementById("out-{cell_number}")
        if element:
            element.innerHTML = f"Error rendering chart: {{str(e)}}"

console.log("PyScript utilities loaded successfully")