# Common imports and utilities for interactive Python cells
import asyncio
from io import StringIO
from js import console, document
import os
import sys

from pyscript import display
from pyodide.http import open_url

#BEGIN# import matplotlib
# Import matplotlib once at the beginning and make it available to all cells
try:
    import matplotlib
    import matplotlib.pyplot as plt
    
    # Set matplotlib to use Agg backend to prevent auto-display
    matplotlib.use('Agg')
    
    # Custom SDS style configuration
    custom_style = {
        # Axes settings
        'axes.axisbelow': True,
        'axes.facecolor': '#eaf3f5',
        'axes.edgecolor': 'black',
        'axes.linewidth': 1.0,
        'axes.grid': True,
        'axes.grid.axis': 'both',
        'axes.labelsize': 10,
        'axes.labelpad': 10,
        'axes.spines.top': False,
        'axes.spines.right': False,
        'axes.titlesize': 12,
        
        # Boxplots settings
        'boxplot.boxprops.color': 'C0',
        'boxplot.whiskerprops.color': 'C0',
        'boxplot.medianprops.linewidth': 2,
        'boxplot.medianprops.color': 'C1',
        
        # Figure settings
        'figure.dpi': 100,
        'figure.edgecolor': 'none',
        'figure.facecolor': '#eaf3f5',
        'figure.figsize': [4, 3.2],
        
        # Grid settings
        'grid.color': 'lightgray',
        'grid.linestyle': '-',
        'grid.linewidth': 0.5,
        'grid.alpha': 0.7,
        
        # Line settings
        'lines.color': 'C4',
        'lines.linewidth': 2.0,
        'lines.markersize': 8,
        
        # Font settings
        'font.size': 12,
        'font.family': 'sans-serif',
        'axes.titlesize': 14,
        'axes.labelsize': 12,
        'xtick.labelsize': 10,
        'ytick.labelsize': 10,
        'legend.fontsize': 11,
        
        # Legend
        'legend.frameon': True,
        'legend.framealpha': 0.8,
        'legend.fancybox': True,
        'legend.shadow': False,
        
        # Mathtext settings
        'mathtext.fontset': 'stix',
        'mathtext.rm': 'stix',
        'mathtext.it': 'stix',
        
        # Patch settings
        'patch.facecolor': 'xkcd:baby blue',
        'patch.edgecolor': 'xkcd:blue gray',
        'patch.force_edgecolor': True,
        
        # Text settings
        'text.usetex': False,
        
        # Savefig settings
        'savefig.dpi': 100,
        'savefig.bbox': 'tight',
        'savefig.facecolor': '#eaf3f5',
        'savefig.edgecolor': 'none',
        
        # Ticks
        'xtick.direction': 'inout',
        'ytick.direction': 'inout',
        'xtick.major.size': 4,
        'ytick.major.size': 4,
        'xtick.minor.size': 2,
        'ytick.minor.size': 2
    }
    
    # Apply the custom style
    plt.rcParams.update(custom_style)
    console.log("Custom SDS matplotlib style applied successfully")
    
    _matplotlib_available = True
except ImportError:
    _matplotlib_available = False
    console.log("Matplotlib not available")
#END#

async def _ensure_localfs():
    """
    Recursively download everything under the `localfs` folder of the GitHub repo
    and replicate it under `/home/pyodide/localfs`.
    """

    manifest_url = "https://raw.githubusercontent.com/dariomalchiodi/sds/main/localfs/manifest.txt"

    try:
        # Download and read manifest file
        with open_url(manifest_url) as response:
            manifest_data = response.read()

        # Handle both bytes and string cases
        if isinstance(manifest_data, bytes):
            file_list = manifest_data.decode('utf-8').splitlines()
        else:
            file_list = manifest_data.splitlines()

        for relative_path in file_list:
            # Compute target path in Pyodide
            dst_path = os.path.join("/home/pyodide", relative_path)
            os.makedirs(os.path.dirname(dst_path), exist_ok=True)

            # Construct raw GitHub URL for the file
            file_url = f"https://raw.githubusercontent.com/dariomalchiodi/sds/main/localfs/{relative_path}"

            try:
                with open_url(file_url) as response:
                    file_data = response.read()

                # Ensure we always have bytes for writing
                if isinstance(file_data, str):
                    file_data = file_data.encode('utf-8')

                with open(dst_path, "wb") as f:
                    f.write(file_data)
            except Exception as e:
                console.log(f"Failed to fetch {relative_path}: {e}")

        # console.log("All localfs files downloaded successfully")
        return True

    except Exception as e:
        console.log(f"Error downloading localfs: {e}")
        return False

# Usage
await _ensure_localfs() 

# Utility function to hide splash loading indicators
def hide_splash(target_id):
    """Hide the splash loading div in the specified target element"""
    try:
        target_element = document.getElementById(target_id)
        if target_element:
            splash_divs = target_element.getElementsByClassName('splash')
            for splash in splash_divs:
                splash.style.display = 'none'
    except Exception as e:
        console.log(f"Could not hide splash in {target_id}: {e}")

console.log("PyScript utilities loaded successfully")